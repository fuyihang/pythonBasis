# -*- coding: utf-8 -*-

######################################################################
########  Python五大基本语句
# 1、赋值语句(var = object)
# 2、输入输出语句
#   1）输入语句input
#   2）输出语句print
# 3、条件语句if-elif-else
# 4、循环语句
#   1）遍历循环for-in-else
#   2）条件循环while-else
# 5、异常语句try-exception-finally

# 请参考官方中文文档
# https://docs.python.org/zh-cn/3.8/tutorial/index.html
######################################################################

##======关于变量======
# 变量，是数据对象的别名。
# 1.变量的命名，请参考前面标识符的命名规范。
# 2.变量不需要事先定义或声明，可以直接赋值
# 3.变量在使用前必须赋值，变量赋值后才会被创建（即实例化）
# 4.变量没有固定类型，可以随时赋值为任何类型


##======1、赋值语句=======================================
##
#赋值，指的是对变量进行赋值，
#   即让变量指向或表示一个数据对象（内存块）
#   或称变量实例化

##变量赋值
#1.使用等号直接赋值
name = "小明"
age = 20

#2.多变量赋值
a=b=c=2         #多变量赋相同的值
print(a,b,c)

# 3.相当于元组对应赋值
a,b,c = 1, 2.5, "OK"    #多变量赋不同的值
print(a,b,c)

#3.其它赋值运算符，请参考运算符
# （除=外，其余均要求变量已经有值存在了）
# =  简单赋值（初始赋值） c=a+b
# += 加法赋值   c += a (c=c+a)
# -= 减法赋值   c -= a (c=c-a)
# *= 乘法赋值   c *= a (c=c*a)
# /= 除法赋值   c /= a (c=c/a)
# %= 取模赋值   c %= a (c=c%a)
# **= 幂赋值/乘方赋值   c **= a (c=c**a)
# //= 除取整赋值    c //= a (c=c//a)


##======2、输入语句=======================================
##
#输入函数input原型
###input([prompt])
# prompt 表示在窗口的提示字符串
# 函数会等待用户操作，直到用户按回车键函数返回，并返回用户输入的字符串（不包括回车换行符）

msg = input("请输入内容：")
print("你输入的内容是=", msg)


##======3、输出语句=======================================
##
#输出函数print原型
###print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
# sep 用于分隔多个字符串的输出，默认为单个空格' '
# end 用于字符中后接着输出的字符串，默认为换行符\n
# file 表示输出的位置，默认是标准输出窗口sys.stdout；
#       你也可以后续默认输出到文件中去
# flush 表示输出时是否可以缓存，默认马上输出

#1）直接输出数据，或者输出变量
# print会自动按正确的格式输出，输出会自动换行
print("Hello World!")
print(20)

name = "小明"
age = 20
print(name)
print(age)

#2）不换行输出
print(name, end = ' ')       #字符串后面紧跟一个空格，而不是换行符\n
print(age)                       #输出结果：小明 20

#3）同时输出多个变量
str1, str2, str3 = 2019, '02', '08'
print(str1, str2, str3)  #默认空格隔开
print(str1, str2, str3, sep = '/')    #用/隔开多个输出，输出结果为2019/02/08

#4）输出格式化变量
# 即在固定字符串中输出指定变量的值。
# 在字符串中使用{}表示要填充的变量的值。

# 两种方式：
# 一）使用位置匹配，按变量位置顺序来匹配填充值
# 二）使用关键字参数匹配，需要指定变量名称

#4.1）变量输出的位置顺序要对应
print("客户名是{}, 年龄是{}岁。".format(name, age))

#4.2）指定变量位置，变量位置顺序无关
msg = '客户名={0:10},年龄={1:10}.'.format(name, age)
print(msg)
print("客户名是{1}, 年龄是{0}岁。".format(age, name))

#4.3）使用字符串前缀f或F，直接变量用{}括起来,即关键字参数
name = "xiaoming"
age = 20
msg = f'客户名是{name},年龄是{age}'
print(f'客户名是{name},年龄是{age}')

#4.4）指定形参名称，变量位置顺序无关
msg = "客户名是{name}, 年龄是{age}岁。".format(age=20, name="小明")
print(msg)

#4.5）字典变量，指定变量位置及键key键，键要用[]包含起来，但不要有引号。
tb = {'baidu':80, 'yahoo':70}
print('Baidu得分={0[baidu]}, Yahoo得分={0[yahoo]}'.format(tb))
#注：前面的0必须要有，表示是第一个变量。

#4.6）字典变量，直接使用键，但变量要带**标记
tb = {'baidu':90, 'yahoo':80}
print('Baidu得分={baidu}, Yahoo得分={yahoo}'.format(**tb))

#5）输出彩色字符串
# 要给字符串带有颜色，则格式如下：
#   \033[显示方式;字体色;背景色m + 字符串 + \033[0m
# 显示方式、前景色、背景色是可选参数，由于表示三个参数的值都是唯一的，所以参数可以没有先后顺序。
# 详细的参数值见后面表格。

msg = '\033[31m' + '我爱中国' + '\033[0m'	    #红色字体
print(msg)

print('\033[0;33m我爱中国\033[0m')		        #正常，黄色字体，无背景

print('\033[1;31;46m我爱中国\033[0m')		    #高亮，红色字体，青色背景

print('\033[5;33m我爱中国\033[0m')		    #闪烁，黄色字体


print('\033[0;36m床前明月光，')
print('疑是地上霜。')
print('举头望明月，')
print('低头思故乡。\033[0m')

# -------------------------------------------
# 字体色     |       背景色     |      颜色描述
# -------------------------------------------
# 30        |        40       |       黑色
# 31        |        41       |       红色
# 32        |        42       |       绿色
# 33        |        43       |       黃色
# 34        |        44       |       蓝色
# 35        |        45       |       紫红色
# 36        |        46       |       青蓝色
# 37        |        47       |       白色
# -------------------------------------------
# -------------------------------
# 显示方式     |      效果
# -------------------------------
# 0           |     终端默认设置
# 1           |     高亮显示
# 4           |     下划线
# 5           |     闪烁
# 7           |     反白显示
# 8           |     不可见
# 22          |     非粗体
# 24          |     非下划线
# 25          |     非闪烁
# 27          |     非反显
# -------------------------------


##======4、条件判断语句=======================================
##
# 条件判断语句if-elif-else
# 1.语句中if是必须的，elif、else是可选的
# 2.甚至elif可重复多次
# 3.if语句还可以嵌套另一个if语句

#基本条件判断
age = input("请输入你的年龄：")
if age.isdigit():
    print("你的年龄是{}岁！".format(age))
else:
    print("输入错误！要求输入数字！")

#嵌套条件判断
age = input('请输入你的年龄：')
if age.isdigit():
    age = int(age)
    if age <10:
        print('免费入场')
    elif age <18:
        print('半票入场')
    elif age <60:
        print('全票入场')
    else:
        print('不允许入场！')
else:
   print("输入错误！要求输入数字！")

#判断列表是否为空，用if语句，或者也可以用len()==0来判断
lines = []
# lines = None
if lines:               #这个语句很不友好,lines = None和lines=[]是一样的结果。
    print("列表=", lines)
else:
    print("列表为空！")

#判断语句还经常与比较运算符、布尔运算符、成员运算符、身份运算符等结合使用

# 比较运算符(6个)
#   ==，!=，>，>=，<，<=
# 布尔运算符(3个)
#   and, or, not
# 成员运算符(2个)
#   in, not in
# 身份运算符(2个)
#   is, is not

lt = list('abcd')
if 'a' in lt:
    print("字符a在列表中！")

##======循环语句===
##
# 循环语句有两个：
# for-in-else 遍历循环，一直到遍历所有项
# while-else  条件循环，条件满足就执行
# 与循环语句配套使用的，还有两个常用关键字break, continue
# break     中断循环，跳出循环体外
# continue  跳过当前循环，继续下一次循环


##======5、遍历循环语句for========
# 1.for-in-else用于遍历序列中的对象
#   for-in是必须的，else是可选的。
#   for循环可以遍历任何序列seq对象，比如str,list,tuple,dict,set等
# 2.else语句，表示在循环完序列对象后执行的语句。
# 3.如果循环被break终止，则不会执行else语句

#最常用的序列类range
# range(5)相当于(0,1,2,3,4)
for i in range(5):
    print(i)

#常见序列类：列表、元组、字典、集合
languages = ['C', 'C++', 'Python', 'Java']
for x in languages:
    print(x)

#字符串也是序列类
for letter in 'Runoob':
    print(letter)
else:
    print("循环正常结束")           
#当没有break语句时，代码放在else中和放在循环体外，是一样的效果。

#中断整个循环break
for letter in 'Runoob':
    #遇到o就中止整个循环
    if letter == 'o':           
        break
    print(letter)
else:
    print("循环正常结束")     #不会被执行

#跳过本次循环，继续下次循环continue
for letter in 'Runoob':
    #遇到o就跳过，只是不打印字符o。
    if letter == 'o':           
        continue
    print(letter)
else:
    print("循环正常结束")       # 会正常执行


##======6、条件循环语句while========
# 1.while-else条件循环
#   条件满足就执行循环体代码
#   else语句可选
# 2.条件不满足就执行else语句，并退出循环
# 3.可以使用Ctrl+C来中断死循环（抛出异常）
# 4.break,continue,else和前面for一样使用

#基本用法
sum,counter = 0, 1
while counter <= 100:           #条件不满足时自动退出循环
    sum += counter
    counter += 1
print(sum)                  

#带else语句
sum,counter = 0, 1
while counter < 3:
    sum += counter
    counter += 1
else:
    print("end")        #会被执行
print(sum)

#终止循环
var = 10
while var > 0:
    if var == 5:        #遇到5就中断打印
        break
    print('当前变量值=', var)
    var -= 1
else:
    print("OK")         #不会被打印

#继续循环
var = 10
while var > 0:
    if var == 5:            #遇到5就不打印，其余会打印，会执行else语句块
        var -= 1            #注意这个语句不能少，否则进入死循环，需要按Ctrl+C中止
        continue
    print('当前变量值=', var)
    var -= 1
else:
    print("OK")         #会被打印


##======7、异常处理语句=======================================
##
# 用来捕获运行时异常，并处理异常后继续执行
try:
    var = 5/0
except ZeroDivisionError as e:
    print('异常信息：\n',e)



##======8、其它特殊语句=======================================
##
# Python中还有一些特殊的语句，这些语句有的可以单纯使用(pass, import)，
# 有的需要配合其它语句（比如break/continue往往和for/while配合使用)
# 1、	assert语句
# 2、	break,continue中止循环/跳过循环语句
# 3、	classdef/fundef语句，类定义和函数定义语句
# 4、	del删除语句，用于删除对象或元素
# 5、	eval语句，用来执行表达式，返回结果
# 6、	future语句
# 7、	global,nonlocal语句，变量作用域描述语句
# 8、	import导入语句，用于导入模块和函数
# 9、	pass空语句，用做占位语句，不做任何事。
# 10、	raise语句，抛出异常
# 11、	with上下文管理语句，常用于文件打开，会自动关闭文件对象
# 12、	yield 语句，实现迭代器，支持遍历
