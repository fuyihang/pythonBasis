# -*- coding: utf-8 -*-

# Python学习 课堂演示
# 任务：
# 1、任务一、
# 2、任务二、
# 3、任务三、

###########################################################
########  Python六个内置数据结构
# 1、数字number: int, bool, float, complex
# 2、字符串str:  "charlist"
# 3、列表list:  [val1, val2, ...]
# 4、元组tuple: (val1, val2, ...)
# 5、字典dict:  {'key1':val1; 'key2':val2}
# 6、集合set:    {va1, val2, val3}
###########################################################

######################################################################
##======数字Number=======================================
######################################################################

#数字类型有四种：int,bool,float,complex型
n = 31
n = 0x1F    #十六进制
n = 0o37    #八进制

flt = 2.1   #浮点数
cp = 1+2j   #复数

# 数字的操作运算（略）

n = 31
print('{}'.format(n))
print('十六进制：{:#X}'.format(n))
print('八进制：{:#o}'.format(n))

n = 21238673486.3488780
print('科学计数法：{:e}'.format(n))
print('浮点数表示：{:f}'.format(n))

n = 0.2386989
print('百分数表示：{:.2%}'.format(n))


######################################################################
##======字符串=======================================
######################################################################

##1.字符串表示
str1 = 'hello'                  #使用单引号括起来
str2 = "Hello"                  #也可以使用双引号
str3 = '他的名字叫"姚明"'         #单引号和双引号可以混用
str4 = "He isn't a chinese"     #混用

# 多行，使用三个单引号，或三个引号
str5 = """Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
"""

##2.转义字符
##字符串中可以包含转义字符
str7 = 'He isn\'t a chinese'    #使用转义字符，\后的任何字符原样输出
str8 = '打印反斜杠\\字符'          #转义字符
str9 = 'hello\nworld'            #特殊的转义字符

##4.字符串访问: 按索引位置访问
s = "Python"
print(s)

print(s[2])
print(s[-2])
# 字符索引下标对应
# +---+---+---+---+---+---+
#  | P | y | t | h | o | n |
#  +---+---+---+---+---+---+
#  0   1   2   3   4   5   6
# -6  -5  -4  -3  -2  -1

##4.字符串访问: 切片[start:stop:step]
s = "Python"

print(s[:3])           # 输出前3个字符
print(s[-3:])          # 输出后3个字符
print(s[2:5:2])        # 输出索引在[2, 5)内的字符
print(s[2:])           # 输出从第三个开始的后的所有字符

##5.字符串修整
s = " Python "
str2 = s.title()  #首字母大写
str2 = s.upper()  #全部字母大写
str2 = s.lower()  #全部字母小写

str2 = s.lstrip() #去除左边空格
str2 = s.rstrip() #去除右边空格
str2 = s.strip()  #去除首尾空格


######################################################################
##======列表类型list=======================================
######################################################################
# 1.列表是用[]来表示，用逗号分隔开元素
# 2.列表中的元素的类型可以不相同
# 3.列表中也可嵌套更复杂的数据类型

##1.列表定义
lt = ['ab', 12, 2.34]               #直接定义列表
lt = []                             #空列表
lt = [0]*5                          #带5个元素且元素全为0的列表
lt = [['a', 'b', 'c'], [1, 2, 3]]   #列表嵌套列表

##2.列表访问
# 列表访问有两种方式：
# 1.采用索引访问。索引从左往右以0开始，从右往左以-1开始
# 2.采用for来遍历列表

#1）索引访问
lt = ['a', 'b', 'c']
val = lt[0]    #第一个元素
val = lt[-1]   #最后一个元素

#2）遍历元素
for itm in lt:
    print(itm)

#3)同时遍历索引和元素
for pos, val in enumerate(lt):
    print('第{}个值:{}'.format(pos, val))

##4)列表切片，形如 变量[i:j:k]，三个值都是可选的
# 表示返回的列表从下标i开始，到尾下标j，步长为k
# 即选择的元素的下标x满足如下条件：
# 1.i <= x < j
# 2.x = i +n *k ,其中n为整数，且n>=0
# 列表切片不会修改原列表元素，只返回指定的元素列表

lt = list('abcde')
newlt = lt[:]           #返回/复制整个列表
newlt = lt[0:2]         #返回['a','b']
newlt = lt[2:]          #返回['c','d','e'],默认尾下标到结尾
newlt = lt[:-2]         #返回['a','b','c']，默认起始下标从0开始
newlt = lt[4:2]         #返回空列表，当j<=i时都是空列表


#按值来寻找索引位置
index = lt.index('b')     #查看值在列表中的索引位置
# index = lt.index('d')     # 如果值不在，则抛出ValueError异常

lt = list(range(10))
newlt = lt[1:9:2]       #返回[1, 3, 5, 7],位置间隔-步长为2

##3.列表操作：增删改

lt = list('abcde')
print('列表长度=',len(lt))

# 修改元素
lt[0] = 'e'             #将第一个元素修改为'e'
lt[2:4] = ['m','n']     #同时修改多个元素

##增加元素
lt.append(2)            #末尾添加一个元素
lt.extend(['g','h'])    #末尾添加多个元素，相当于添加一个新列表
lt.insert(0, 'OK')      #指定位置插入新元素

##删除元素 (删除指定位置的元素、删除指定值的元素)
itm = lt.pop()          #弹出末尾位置的元素，返回的元素可以继续使用
itm = lt.pop(-2)        #弹出指定索引位置的元素，并返回该元素

itm = lt.remove('b')    #删除指定值的元素，即按值删除
# itm = lt.remove('k')    #如果值不在列表中，会抛出ValueError异常
itm = lt.remove('e')    #如果存在相同值的多个元素，则只删除前面第一个元素

# 清空整个列表
lt.clear()

##4.列表操作、运算
lt = list('abcde')

# 1）成员运算符
if 'a' in lt:       
    print('项在列表中。')
else:
    pass

# 2）列表合并
lt1 = list('abcd')
lt2 = list('efg')
lt = lt1 + lt2          #运算符合并

lt1.extend(lt2)         #用函数合并：将lt2合并到lt1列表中

# 3）列表排序
cars = ['BMW', 'Audi', 'Toyota', 'Subaru']
cars.sort()                 #列表升序
cars.sort(reverse = True)   #列表降序

# 4）列表反转顺序
cars = ['BMW', 'Audi', 'Toyota', 'Subaru']
cars.reverse()              #列表反转顺序

# 5）临时排序，不改变原来列表
cars = ['BMW', 'Audi', 'Toyota', 'Subaru']
tmp = sorted(cars)
print('原始列表：', cars)
print('排序后列表：', tmp)

# 6）列表复制 
newCars = cars.copy()       #函数复制
print(newCars)


######################################################################
##======元组类型tuple=======================================
######################################################################
## 元组是不可改变的列表
## 除了不允许修改元素外，其余操作与列表基本类似

##1.元组定义
# 元组是用()来表示，用逗号分隔开元素

tp = ()                             #空元组
tp = ('ab', 12, [1,2,3])            #直接定义
tp = tuple('abcd')                  #字符串转换为元组
tp = ('Hi',)*4                      #有4个元素的元组，所有元素初始化为'Hi'，即重复4次的元素
#('Hi','Hi','Hi','Hi')

# 2.元素访问
print(tp[1])
print(tp[:2])

for val in tp:
    print(val)

for pos, val in enumerate(tp):
    print('第{}个值：{}'.format(pos, val))

######################################################################
##======字典类型dict=======================================
######################################################################
# 字典和列表类似，两者区别在于：
# 1.列表是有序的对象集合，而字典是无序的对象集合。
# 2.列表的元素是通过索引位置访问，而字典中元素是通过键来访问。
# 3.列表的索引必须是数字，而字典的索引（即键）可以是字符串，更易读。
# 4.列表的索引是隐式，而字典显式地保留了键值对（key-Value）。

##1. 字典定义
# 1.字典用{}标识，用逗号分隔元素，用:分隔键值（键:值）。
# 2.键(key)必须是不可变类型，如果字符串、数字或元组等。
# 3.键必须是唯一的，不能重复；重复的关键字指的是同一个元素。
dct = {}                                #1.空字典
dct = {'color':'green', 'pointx':5, 'pointy':34}      #2.键值对定义

##2. 字典属性
print(dct.keys())
print(dct.values())
print(dct.items())

##3. 字典访问
print(dct['color']) #按key访问

# 遍历
for key,val in dct.items():
    print('key={},val={}'.format(key, val))

